#Script that performs optimization to perform inference
import os
import numpy as np
import torch
import pickle

#Import ground truth solution data generated by fenics,u_g
os.system("python testime_optimization --new_data")
with open("/home/dami/Inverse_GNN/FEM_output/fenics_sol","rb") as fd:
    data = pickle.load(fd)

with open("/home/dami/Inverse_GNN/FEM_output/fenics_coord","rb") as fe:
    coord = pickle.load(fe)

with open("/home/dami/Inverse_GNN/FEM_output/fenics_lab","rb") as ff:
    lab = pickle.load(ff)

#Generate random parameter values and define ADAM Optimizer

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
init_param = 250
lr = 0.0001
optparam = torch.nn.Parameter((torch.ones(100).to(device))*init_param,requires_grad=True).to(device)
print(type(optparam))
optim = torch.optim.Adam(params=optparam, lr=lr)


#Feed said values -> GNN -> FEM -> output solution mesh,u_p

os.system('python train_FEMgpuGS.py --FEM_solver')) 

#Compute loss between ground truth solution data (u_g, u_p) 

loss = MSE(u_g,u_p)

#Compute gradient and steop in correct direction
optim.zero_grad()
loss.backward()
optim.step()

#Step

